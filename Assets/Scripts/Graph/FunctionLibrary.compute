#pragma kernel FunctionKernel
#define PI 3.14159265358979323846
//Rw stands for read write, structured buffer is kinda just a computer buffer.
RWStructuredBuffer<float3> _Positions;

uint _Resolution;

float _Step;
float _Time;

float2 GetUV(uint3 id)
{
    return (id.xy + 0.5) * _Step - 1.0;
}

void SetPosition(uint3 id, float3 position)
{
    //to avoid array out of bounds, only if both ids are under resolution can we set position
    if (id.x < _Resolution && id.y < _Resolution)
    {
        _Positions[id.x + id.y * _Resolution] = position;
    }
}

float3 Wave(float u, float v, float time)
{
    float3 p;
    p.x = u;
    p.z = v;
    
    //Simple Sine wave
    p.y = sin(PI * (u + v + time));
    return p;
}

float3 Ripple (float u, float v, float t) {
	float d = sqrt(u * u + v * v);
	float3 p;
	p.x = u;
	p.y = sin(PI * (4.0 * d - t));
	p.y /= 1.0 + 10.0 * d;
	p.z = v;
	return p;
}

float3 Sphere (float u, float v, float t) {
	float r = 0.9 + 0.1 * sin(PI * (6.0 * u + 4.0 * v + t));
	float s = r * cos(0.5 * PI * v);
	float3 p;
	p.x = s * sin(PI * u);
	p.y = r * sin(0.5 * PI * v);
	p.z = s * cos(PI * u);
	return p;
}

float3 Torus (float u, float v, float t) {
	float r1 = 0.7 + 0.1 * sin(PI * (6.0 * u + 0.5 * t));
	float r2 = 0.15 + 0.05 * sin(PI * (8.0 * u + 4.0 * v + 2.0 * t));
	float s = r2 * cos(PI * v) + r1;
	float3 p;
	p.x = s * sin(PI * u);
	p.y = r2 * sin(PI * v);
	p.z = s * cos(PI * u);
	return p;
}

//gpu has compute units that run specific fixed amount in lockstep = warps/wavefronts. amd=64thread nvidia=32thread so 64 is good number
[numthreads(8,8,1)]
//each number is for dimensions, so we get this one back in a 2d 8x8, also each thread gets an vector3 id
//we need to give it a semantic keyword so gpu knows to give the id
void FunctionKernel(uint3 id : SV_DispatchThreadID)
{
    float2 uv = GetUV(id);
	SetPosition(id, Wave(uv.x,uv.y, _Time));
}

